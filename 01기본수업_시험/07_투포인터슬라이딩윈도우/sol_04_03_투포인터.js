
// 투포인터 루틴!!*************
// 기본이니 외웁시다.!

function solution(nums, m){
    let answer = 0, lt=0, sum=0; //lt 부터 rt까지의 합
    for(let rt=0; rt<nums.length; rt++){
        sum+=nums[rt];
        if(sum===m){
            answer++;
        }
        while(sum>m){ //sum이 기준값보다 커지면 lt를 당긴다.
            sum-=nums[lt++];   
            console.log(`rt lt sum ${rt} : ${lt} : ${sum}`)       
            if(sum===m) answer++;  
        }
    }
    return answer;
}

console.log(solution([1, 2, 1, 3, 1, 1, 1, 2], 6)); 


/* 
연속 부분수열 1
N개의 수로 이루어진 수열이 주어집니다.
이 수열에서 연속부분수열의 합이 특정숫자 M이 되는 경우가 몇 번 있는지 구하는 프로그램을 
작성하세요.
만약 N=8, M=6이고 수열이 다음과 같다면
1 2 1 3 1 1 1 2 
합이 6이 되는 연속부분수열은 {2, 1, 3}, {1, 3, 1, 1}, {3, 1, 1, 1}로 총 3가지입니다.
▣ 입력설명
매개변수 nums에 길이 N인 수열이 주어집니다. 매개변수 m에 M(1≤M≤100,000,000)이 주어
진다. 수열의 원소값은 1,000을 넘지 않는 자연수이다.
▣ 출력설명
모든 경우의 수를 반환합니다.
▣ 매개변수 형식 1 
[1, 2, 1, 3, 1, 1, 1, 2], 6
▣ 반환값 형식 1
3
▣ 매개변수 형식 2 
[1, 1, 1, 1, 1, 1], 3
▣ 반환값 형식 2
4
▣ 매개변수 형식 3 
[1, 2, 1, 2, 1, 2, 1], 3
▣ 반환값 형식 3
6

*/