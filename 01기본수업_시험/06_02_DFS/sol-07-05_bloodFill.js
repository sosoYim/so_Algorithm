//한번 다녀간 섬은 0으로 바꿔준다.
//1을 만나면 DFS 호출.
//DFS 호출을 몇 번 하는가
//Blood Fill 알고리즘 (한 포인트에서 퍼져나가며 탐색하는 것)
//대표적인 문제 : 단지 번호 붙이기, 유기농 배추...

function solution(board) {
  let answer = 0;
  let n = board.length;
  let dx = [-1, -1, 0, 1, 1, 1, 0, -1];
  let dy = [0, 1, 1, 1, 0, -1, -1, -1];

  function DFS(x, y) {
    //모든 방향에서 갈 수 있는 곳 탐색
    for (let k = 0; k < 8; k++) {
      let nx = x + dx[k];
      let ny = y + dy[k];
      //유효한 범위 안이고, 가보지 않은 육지(1)일 때
      if (nx > 0 && nx < n && ny > 0 && ny < n && board[nx][ny] === 1) {
        board[nx][ny] = 0; //한 번 다녀왔으면 0으로
        DFS(nx, ny);
      }
    }
  }

  for (let i = 0; i < n; i++) {
    for (let j = 0; j < n; j++) {
      if (board[i][j] === 1) {
        //육지면
        board[i][j] = 0;
        answer++;
        DFS(i, j);
      }
    }
  }

  return answer;
}

const board = [
  [1, 1, 0, 0, 0, 1, 0],
  [0, 1, 1, 0, 1, 1, 0],
  [0, 1, 0, 0, 0, 0, 0],
  [0, 0, 0, 1, 0, 1, 1],
  [1, 1, 0, 1, 1, 0, 0],
  [1, 0, 0, 0, 1, 0, 0],
  [1, 0, 1, 0, 1, 0, 0],
];
console.log(solution(board)); //5

/*
섬나라 아일랜드(DFS)
N*N의 섬나라 아일랜드의 지도가 격자판의 정보로 주어집니다. 각 섬은 1로 표시되어 상하좌
우와 대각선으로 연결되어 있으며, 0은 바다입니다. 섬나라 아일랜드에 몇 개의 섬이 있는지 
구하는 프로그램을 작성하세요.
1 1 0 0 0 1 0
0 1 1 0 1 1 0
0 1 0 0 0 0 0
0 0 0 1 0 1 1
1 1 0 1 1 0 0
1 0 0 0 1 0 0
1 0 1 0 1 0 0
만약 위와 같다면 
▣ 입력설명
매개변수 board에 N*N(3<=N<=20)의 격자판 정보가 주어집니다.
▣ 출력설명
섬의 개수를 반환합니다.
▣ 매개변수 형식 1 
[[1, 1, 0, 0, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1], 
[1, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0], [1, 0, 1, 0, 1, 0, 0]]
▣ 반환값 형식 1
5
*/
