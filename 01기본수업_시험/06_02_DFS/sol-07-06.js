//최대 선호 음식
//양념 D 개 중 K 개 => 만들 수 있는 음식 종류
//만들 수 있는 음식 종류 다 구하기
//학생들이 모두 먹을 수 있는지 각각 비교
//비트 연산 1011 & 1010 => 1010 (이진수로 바꿔서 둘 다 값을 가졌을 때만 반환)
//학생의 선호재료 & 요리 의 비트 연산이 학생과 같다면 => 학생의 선호재료가 요리의 부분집합임
//이를 이용하면 학생에 대한 for문 한번만 돌면 된다.

function solution(nums, d, k) {
  //선호도, 양념 수 , 양념 제한 수
  let answer = Number.MIN_SAFE_INTEGER;
  let pow = Array.from({ length: d + 1 }, () => 0);
  let st = Array.from({ length: nums.length }, () => 0); //0자리에 1학생
  let n = nums.length;
  pow[1] = 1; //가중치. 1엔덱스에 1, 2인덱스에 2, 3인덱스에 4, 4인덱스에 8... 이진법

  // pow의 인덱스는 양념번호
  for (let i = 2; i <= d; i++) {
    pow[i] = pow[i - 1] * 2; //이진법 값들 만들어 주는 중
  }

  console.log(pow);

  //학생들의 선택을 저장
  //0학생 선호양념의 십진화 저장 (ex: 1,3 양념 선호 => 1+4 = 5저장)
  for (let i = 0; i < n; i++) {
    //학생
    for (let j = 0; j < nums[i].length; j++) {
      //학생의 양념
      st[i] += pow[nums[i][j]]; //i학생의 모든 양념 더하기
    }
  }

  console.log(st);

  function DFS(L, s, bit) {
    //길이, 양념, 비트연산으로 비교할 요리
    if (L === k) {
      //재료 조합 하나 완성
      let cnt = 0;
      for (let j = 0; j < n; j++) {
        //학생 대상 포문
        if ((bit & st[j]) === st[j]) cnt++; //비트 연산으로 나오는 것은 두 비교값의 교집합 => 이 교집합이 학생의 값과 같다면 포함!
      }
      answer = Math.max(answer, cnt);
    } else {
      for (let i = s; i <= d; i++) {
        //음식을 만드는 과정
        DFS(L + 1, i + 1, bit + pow[i]); //요리하나 나옴
      }
    }
  }

  DFS(0, 1, 0);
  return answer;
}

console.log(solution([[1], [2, 3], [3], [1, 2], [], [2, 1], [2, 3, 4], [3, 4]], 4, 3));

/*
최대 선호 음식(DFS)
엘리트 학원에서 선생님과 학생들이 소풍을 갔습니다. 선생님들은 학생들에게 요리를 해주기
로 마음먹고, 학생들에게 각자의 취향에 대해서 물었다.
선생님들이 가지고 있는 양념재료의 종류는 D(1≤D≤15)종류입니다, 양념재료는 1부터 D까지 
번호로 매겨져 있다. 각각의 학생들은 자기가 원하는 재료가 꼭 다 들어가야만 음식을 먹겠다
고 합니다. 
학생들은 총 N(1≤N≤30,000)명이 있고, 선생님이 사용할 수 있는 재료의 종류가 K(1≤K≤D)
개 이하가 되도록 하려 한다. 위의 조건을 만족하면서 최대 몇 명의 학생에게 음식을 만들어 
줄 수 있는지 구하는 프로그램을 작성하세요.
▣ 입력설명
매개변수 nums 배열에 1번 학생부터 N번 학생까지의 음식취향에 관한 정보가 주어진다. 배열
의 원소는 학생이 좋아하는 재료의 번호이다. 재료의 번호는 1부터 D까지의 정수로 나타낸다. 
원하는 재료가 없는 학생은 아무거나 먹겠다는 뜻으로 해석한다. 그 다음 D와 K가 입력된다.
▣ 출력설명
조건을 만족하는 최대인원을 반환합니다.
▣ 매개변수 형식 
[[1], [2, 3], [3], [1, 2], [], [2, 1], [2, 3, 4], [3, 4]], 4, 3
▣ 반환값 형식
6
입출력설명:
nums 배열이 다음과 같다면 [[1], [2, 3], [3], [1, 2], [], [2, 1], [2, 3, 4], [3, 4]]
1번 학생은 1번 재료가 꼭 들어가야 먹으며, 2번학생은 2번과 3번 재료가 꼭 들어가야 먹습니
다. 5번학생은 원하는 재료가 없으므로 아무거나 먹겠다는 뜻입니다.
출력은 1, 2, 3번 재료를 사용해 음색을 만들면 1, 2, 3, 4, 5, 6번 학생들이 음식을 먹을 수 
있어 최대인원은 6명입니다
*/
